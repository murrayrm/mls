%!PS-Adobe-3.0 EPSF-2.0
%%Creator: Windows PSCRIPT
%%Title: Ami Pro - HW3HELP.SAM
%%BoundingBox: 13 12 595 780
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%Pages: 0
%%BeginResource: procset Win35Dict 3 1
/Win35Dict 290 dict def Win35Dict begin/bd{bind def}bind def/in{72
mul}bd/ed{exch def}bd/ld{load def}bd/tr/translate ld/gs/gsave ld/gr
/grestore ld/M/moveto ld/L/lineto ld/rmt/rmoveto ld/rlt/rlineto ld
/rct/rcurveto ld/st/stroke ld/n/newpath ld/sm/setmatrix ld/cm/currentmatrix
ld/cp/closepath ld/ARC/arcn ld/TR{65536 div}bd/lj/setlinejoin ld/lc
/setlinecap ld/ml/setmiterlimit ld/sl/setlinewidth ld/scignore false
def/sc{scignore{pop pop pop}{0 index 2 index eq 2 index 4 index eq
and{pop pop 255 div setgray}{3{255 div 3 1 roll}repeat setrgbcolor}ifelse}ifelse}bd
/FC{bR bG bB sc}bd/fC{/bB ed/bG ed/bR ed}bd/HC{hR hG hB sc}bd/hC{
/hB ed/hG ed/hR ed}bd/PC{pR pG pB sc}bd/pC{/pB ed/pG ed/pR ed}bd/sM
matrix def/PenW 1 def/iPen 5 def/mxF matrix def/mxE matrix def/mxUE
matrix def/mxUF matrix def/fBE false def/iDevRes 72 0 matrix defaultmatrix
dtransform dup mul exch dup mul add sqrt def/fPP false def/SS{fPP{
/SV save def}{gs}ifelse}bd/RS{fPP{SV restore}{gr}ifelse}bd/EJ{gsave
showpage grestore}bd/#C{userdict begin/#copies ed end}bd/FEbuf 2 string
def/FEglyph(G  )def/FE{1 exch{dup 16 FEbuf cvrs FEglyph exch 1 exch
putinterval 1 index exch FEglyph cvn put}for}bd/SM{/iRes ed/cyP ed
/cxPg ed/cyM ed/cxM ed 72 100 div dup scale dup 0 ne{90 eq{cyM exch
0 eq{cxM exch tr -90 rotate -1 1 scale}{cxM cxPg add exch tr +90 rotate}ifelse}{cyP
cyM sub exch 0 ne{cxM exch tr -90 rotate}{cxM cxPg add exch tr -90
rotate 1 -1 scale}ifelse}ifelse}{pop cyP cyM sub exch 0 ne{cxM cxPg
add exch tr 180 rotate}{cxM exch tr 1 -1 scale}ifelse}ifelse 100 iRes
div dup scale 0 0 transform .25 add round .25 sub exch .25 add round
.25 sub exch itransform translate}bd/SJ{1 index 0 eq{pop pop/fBE false
def}{1 index/Break ed div/dxBreak ed/fBE true def}ifelse}bd/ANSIVec[
16#0/grave 16#1/acute 16#2/circumflex 16#3/tilde 16#4/macron 16#5/breve
16#6/dotaccent 16#7/dieresis 16#8/ring 16#9/cedilla 16#A/hungarumlaut
16#B/ogonek 16#C/caron 16#D/dotlessi 16#27/quotesingle 16#60/grave
16#7C/bar 16#82/quotesinglbase 16#83/florin 16#84/quotedblbase 16#85
/ellipsis 16#86/dagger 16#87/daggerdbl 16#89/perthousand 16#8A/Scaron
16#8B/guilsinglleft 16#8C/OE 16#91/quoteleft 16#92/quoteright 16#93
/quotedblleft 16#94/quotedblright 16#95/bullet 16#96/endash 16#97
/emdash 16#99/trademark 16#9A/scaron 16#9B/guilsinglright 16#9C/oe
16#9F/Ydieresis 16#A0/space 16#A4/currency 16#A6/brokenbar 16#A7/section
16#A8/dieresis 16#A9/copyright 16#AA/ordfeminine 16#AB/guillemotleft
16#AC/logicalnot 16#AD/hyphen 16#AE/registered 16#AF/macron 16#B0/degree
16#B1/plusminus 16#B2/twosuperior 16#B3/threesuperior 16#B4/acute 16#B5
/mu 16#B6/paragraph 16#B7/periodcentered 16#B8/cedilla 16#B9/onesuperior
16#BA/ordmasculine 16#BB/guillemotright 16#BC/onequarter 16#BD/onehalf
16#BE/threequarters 16#BF/questiondown 16#C0/Agrave 16#C1/Aacute 16#C2
/Acircumflex 16#C3/Atilde 16#C4/Adieresis 16#C5/Aring 16#C6/AE 16#C7
/Ccedilla 16#C8/Egrave 16#C9/Eacute 16#CA/Ecircumflex 16#CB/Edieresis
16#CC/Igrave 16#CD/Iacute 16#CE/Icircumflex 16#CF/Idieresis 16#D0/Eth
16#D1/Ntilde 16#D2/Ograve 16#D3/Oacute 16#D4/Ocircumflex 16#D5/Otilde
16#D6/Odieresis 16#D7/multiply 16#D8/Oslash 16#D9/Ugrave 16#DA/Uacute
16#DB/Ucircumflex 16#DC/Udieresis 16#DD/Yacute 16#DE/Thorn 16#DF/germandbls
16#E0/agrave 16#E1/aacute 16#E2/acircumflex 16#E3/atilde 16#E4/adieresis
16#E5/aring 16#E6/ae 16#E7/ccedilla 16#E8/egrave 16#E9/eacute 16#EA
/ecircumflex 16#EB/edieresis 16#EC/igrave 16#ED/iacute 16#EE/icircumflex
16#EF/idieresis 16#F0/eth 16#F1/ntilde 16#F2/ograve 16#F3/oacute 16#F4
/ocircumflex 16#F5/otilde 16#F6/odieresis 16#F7/divide 16#F8/oslash
16#F9/ugrave 16#FA/uacute 16#FB/ucircumflex 16#FC/udieresis 16#FD/yacute
16#FE/thorn 16#FF/ydieresis ] def/reencdict 12 dict def/IsChar{basefontdict
/CharStrings get exch known}bd/MapCh{dup IsChar not{pop/bullet}if
newfont/Encoding get 3 1 roll put}bd/MapDegree{16#b0/degree IsChar{
/degree}{/ring}ifelse MapCh}bd/MapBB{16#a6/brokenbar IsChar{/brokenbar}{
/bar}ifelse MapCh}bd/ANSIFont{reencdict begin/newfontname ed/basefontname
ed FontDirectory newfontname known not{/basefontdict basefontname findfont
def/newfont basefontdict maxlength dict def basefontdict{exch dup/FID
ne{dup/Encoding eq{exch dup length array copy newfont 3 1 roll put}{exch
newfont 3 1 roll put}ifelse}{pop pop}ifelse}forall newfont/FontName
newfontname put 127 1 159{newfont/Encoding get exch/bullet put}for
ANSIVec aload pop ANSIVec length 2 idiv{MapCh}repeat MapDegree MapBB
newfontname newfont definefont pop}if newfontname end}bd/SB{FC/ULlen
ed/str ed str length fBE not{dup 1 gt{1 sub}if}if/cbStr ed/dxGdi ed
/y0 ed/x0 ed str stringwidth dup 0 ne{/y1 ed/x1 ed y1 y1 mul x1 x1
mul add sqrt dxGdi exch div 1 sub dup x1 mul cbStr div exch y1 mul
cbStr div}{exch abs neg dxGdi add cbStr div exch}ifelse/dyExtra ed
/dxExtra ed x0 y0 M fBE{dxBreak 0 BCh dxExtra dyExtra str awidthshow}{dxExtra
dyExtra str ashow}ifelse fUL{x0 y0 M dxUL dyUL rmt ULlen fBE{Break
add}if 0 mxUE transform gs rlt cyUL sl [] 0 setdash st gr}if fSO{x0
y0 M dxSO dySO rmt ULlen fBE{Break add}if 0 mxUE transform gs rlt cyUL
sl [] 0 setdash st gr}if n/fBE false def}bd/font{/name ed/Ascent ed
0 ne/fT3 ed 0 ne/fSO ed 0 ne/fUL ed/Sy ed/Sx ed 10.0 div/ori ed -10.0
div/esc ed/BCh ed name findfont/xAscent 0 def/yAscent Ascent def/ULesc
esc def ULesc mxUE rotate pop fT3{/esc 0 def xAscent yAscent mxUE transform
/yAscent ed/xAscent ed}if [Sx 0 0 Sy neg xAscent yAscent] esc mxE
rotate mxF concatmatrix makefont setfont [Sx 0 0 Sy neg 0 Ascent] mxUE
mxUF concatmatrix pop fUL{currentfont dup/FontInfo get/UnderlinePosition
known not{pop/Courier findfont}if/FontInfo get/UnderlinePosition get
1000 div 0 exch mxUF transform/dyUL ed/dxUL ed}if fSO{0 .3 mxUF transform
/dySO ed/dxSO ed}if fUL fSO or{currentfont dup/FontInfo get/UnderlineThickness
known not{pop/Courier findfont}if/FontInfo get/UnderlineThickness get
1000 div Sy mul/cyUL ed}if}bd/min{2 copy gt{exch}if pop}bd/max{2 copy
lt{exch}if pop}bd/CP{/ft ed{{ft 0 eq{clip}{eoclip}ifelse}stopped{currentflat
1 add setflat}{exit}ifelse}loop}bd/patfont 10 dict def patfont begin
/FontType 3 def/FontMatrix [1 0 0 -1 0 0] def/FontBBox [0 0 16 16]
def/Encoding StandardEncoding def/BuildChar{pop pop 16 0 0 0 16 16
setcachedevice 16 16 false [1 0 0 1 .25 .25]{pat}imagemask}bd end/p{
/pat 32 string def{}forall 0 1 7{dup 2 mul pat exch 3 index put dup
2 mul 1 add pat exch 3 index put dup 2 mul 16 add pat exch 3 index
put 2 mul 17 add pat exch 2 index put pop}for}bd/pfill{/PatFont patfont
definefont setfont/ch(AAAA)def X0 64 X1{Y1 -16 Y0{1 index exch M ch
show}for pop}for}bd/vert{X0 w X1{dup Y0 M Y1 L st}for}bd/horz{Y0 w
Y1{dup X0 exch M X1 exch L st}for}bd/fdiag{X0 w X1{Y0 M X1 X0 sub dup
rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup rlt st}for}bd/bdiag{X0 w
X1{Y1 M X1 X0 sub dup neg rlt st}for Y0 w Y1{X0 exch M Y1 Y0 sub dup
neg rlt st}for}bd/AU{1 add cvi 15 or}bd/AD{1 sub cvi -16 and}bd/SHR{pathbbox
AU/Y1 ed AU/X1 ed AD/Y0 ed AD/X0 ed}bd/hfill{/w iRes 37.5 div round
def 0.1 sl [] 0 setdash n dup 0 eq{horz}if dup 1 eq{vert}if dup 2 eq{fdiag}if
dup 3 eq{bdiag}if dup 4 eq{horz vert}if 5 eq{fdiag bdiag}if}bd/F{/ft
ed fm 256 and 0 ne{gs FC ft 0 eq{fill}{eofill}ifelse gr}if fm 1536
and 0 ne{SHR gs HC ft CP fm 1024 and 0 ne{/Tmp save def pfill Tmp restore}{fm
15 and hfill}ifelse gr}if}bd/S{PenW sl PC st}bd/m matrix def/GW{iRes
12 div PenW add cvi}bd/DoW{iRes 50 div PenW add cvi}bd/DW{iRes 8 div
PenW add cvi}bd/SP{/PenW ed/iPen ed iPen 0 eq iPen 6 eq or{[] 0 setdash}if
iPen 1 eq{[DW GW] 0 setdash}if iPen 2 eq{[DoW GW] 0 setdash}if iPen
3 eq{[DW GW DoW GW] 0 setdash}if iPen 4 eq{[DW GW DoW GW DoW GW] 0
setdash}if}bd/E{m cm pop tr scale 1 0 moveto 0 0 1 0 360 arc cp m sm}bd
/AG{/sy ed/sx ed sx div 4 1 roll sy div 4 1 roll sx div 4 1 roll sy
div 4 1 roll atan/a2 ed atan/a1 ed sx sy scale a1 a2 ARC}def/A{m cm
pop tr AG m sm}def/P{m cm pop tr 0 0 M AG cp m sm}def/RRect{n 4 copy
M 3 1 roll exch L 4 2 roll L L cp}bd/RRCC{/r ed/y1 ed/x1 ed/y0 ed/x0
ed x0 x1 add 2 div y0 M x1 y0 x1 y1 r arcto 4{pop}repeat x1 y1 x0 y1
r arcto 4{pop}repeat x0 y1 x0 y0 r arcto 4{pop}repeat x0 y0 x1 y0 r
arcto 4{pop}repeat cp}bd/RR{2 copy 0 eq exch 0 eq or{pop pop RRect}{2
copy eq{pop RRCC}{m cm pop/y2 ed/x2 ed/ys y2 x2 div 1 max def/xs x2
y2 div 1 max def/y1 exch ys div def/x1 exch xs div def/y0 exch ys div
def/x0 exch xs div def/r2 x2 y2 min def xs ys scale x0 x1 add 2 div
y0 M x1 y0 x1 y1 r2 arcto 4{pop}repeat x1 y1 x0 y1 r2 arcto 4{pop}repeat
x0 y1 x0 y0 r2 arcto 4{pop}repeat x0 y0 x1 y0 r2 arcto 4{pop}repeat
m sm cp}ifelse}ifelse}bd/PP{{rlt}repeat}bd/OB{gs 0 ne{7 3 roll/y ed
/x ed x y translate ULesc rotate x neg y neg translate x y 7 -3 roll}if
sc B fill gr}bd/B{M/dy ed/dx ed dx 0 rlt 0 dy rlt dx neg 0 rlt cp}bd
/CB{B clip n}bd/ErrHandler{errordict dup maxlength exch length gt
dup{errordict begin}if/errhelpdict 12 dict def errhelpdict begin/stackunderflow(operand stack underflow)def
/undefined(this name is not defined in a dictionary)def/VMerror(you have used up all the printer's memory)def
/typecheck(operator was expecting a different type of operand)def
/ioerror(input/output error occured)def end{end}if errordict begin
/handleerror{$error begin newerror{/newerror false def showpage 72
72 scale/x .25 def/y 9.6 def/Helvetica findfont .2 scalefont setfont
x y moveto(Offending Command = )show/command load{dup type/stringtype
ne{(max err string)cvs}if show}exec/y y .2 sub def x y moveto(Error = )show
errorname{dup type dup( max err string )cvs show( : )show/stringtype
ne{( max err string )cvs}if show}exec errordict begin errhelpdict errorname
known{x 1 add y .2 sub moveto errhelpdict errorname get show}if end
/y y .4 sub def x y moveto(Stack =)show ostack{/y y .2 sub def x 1
add y moveto dup type/stringtype ne{( max err string )cvs}if show}forall
showpage}if end}def end}bd end
%%EndResource
/SVDoc save def
%%EndProlog
%%BeginSetup
Win35Dict begin
ErrHandler
%%EndSetup
SS
0 0 18 16 809 1100 300 SM
32 0 0 42 42 0 0 0 38 /Times-Roman /font36 ANSIFont font
0 0 0 fC
246 255 1872 (The following Matlab code fragments are offered to help you complete the programming portion of Lab 2 and) 1872 SB
246 305 1847 (Homework 3.  These assignments involve forward and inverse kinematics of the Intelledex and Jacobian and) 1847 SB
246 355 351 (singularity concepts.) 351 SB
32 0 0 50 50 0 0 0 48 /Times-Bold /font33 ANSIFont font
246 460 314 (File: linklen.m) 314 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 521 700 (function [l1,l2] = linklen\(\)) 700 SB
246 563 675 (% link length specification) 675 SB
246 605 600 (%    [l1,l2] = linklen\(\)) 600 SB
246 648 25 (%) 25 SB
246 690 425 (% DC Deno 9-26-91) 425 SB
246 774 225 (l1 = 0.3;) 225 SB
546 774 650 (% meters \(1 ft = 0.3048 m\)) 650 SB
246 816 225 (l2 = 0.3;) 225 SB
546 816 200 (% meters) 200 SB
32 0 0 50 50 0 0 0 48 /Times-Bold /font33 ANSIFont font
246 900 241 (File: cp3.m) 241 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 961 1050 (function theta = cp3\(b,q,delta,w,r,switch\)) 1050 SB
246 1003 1575 (% \(canonical\) subproblem 3: rotate b to a distance delta from q) 1575 SB
246 1045 750 (%    twist is pure rotation.  ) 750 SB
996 1045 525 (point r on twist axis) 525 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 1087 1475 (%    b,q,r are 4x1 points.  w is 4x1 unit direction vector.) 1475 SB
246 1129 1125 (%    delta is a scalar distance from point q.) 1125 SB
246 1172 1650 (%    switch is an optional integer argument \(0 or 1\) to pick which) 1650 SB
246 1214 700 (%       solution is returned) 700 SB
246 1256 875 (% theta = cp3\(b,q,delta,w,r,switch\)) 875 SB
246 1298 25 (%) 25 SB
246 1340 425 (% DC Deno 9-26-91) 425 SB
246 1424 1050 (% set "solution" to choose which to return) 1050 SB
246 1466 350 (if nargin > 5,) 350 SB
246 1508 550 (    solution = switch;) 550 SB
246 1550 125 (else,) 125 SB
246 1592 425 (    solution = 0;) 425 SB
246 1634 75 (end) 75 SB
246 1719 200 (y = b-r;) 200 SB
246 1761 200 (u = q-r;) 200 SB
246 1845 650 (uperp = \(eye\(4\) - w*w'\)*u;) 650 SB
246 1887 650 (yperp = \(eye\(4\) - w*w'\)*y;) 650 SB
246 1971 825 (deltap2 = delta^2 - \(w'*\(u-y\)\)^2;) 825 SB
246 2055 975 (% check for no solution, bomb out if so) 975 SB
246 2097 550 (if deltap2 < -100*eps,) 550 SB
246 2139 1325 (    error\('cp3 failure: no solutions: deltap^2 < 0'\);) 1325 SB
246 2182 75 (end) 75 SB
246 2266 1300 (theta0 = atan2\(w'*cross\(yperp,uperp\), yperp'*uperp\);) 1300 SB
246 2308 1250 (cosphi = \(uperp'*uperp + yperp'*yperp - deltap2\) /) 1250 SB
246 2350 700 (\(2*norm\(uperp\)*norm\(yperp\)\);) 700 SB
246 2434 975 (% check for no solution, bomb out if so) 975 SB
246 2476 675 (if abs\(cosphi\) > 1+100*eps,) 675 SB
246 2518 1575 (    error\('cp3 failure: no solutions: cos\(phi\) out of [-1,1]'\);) 1575 SB
246 2560 75 (end) 75 SB
246 2644 475 (phi = acos\(cosphi\);) 475 SB
246 2687 425 (if solution ~= 0,) 425 SB
846 2687 475 (% get flip solution) 475 SB
246 2729 375 (    phi = -phi;) 375 SB
246 2771 75 (end) 75 SB
246 2855 525 (theta = theta0 + phi;) 525 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font36 ANSIFont font
246 29 913 (EE125 Homework 3: Suggestions for Coding) 913 SB
1774 29 422 (DC Deno, 10-Oct-91) 422 SB
246 2969 110 (Page ) 110 SB
356 2969 25 (1) 25 SB
EJ RS
%%PageTrailer
SS
0 0 18 16 809 1100 300 SM
32 0 0 50 50 0 0 0 48 /Times-Bold /font33 ANSIFont font
0 0 0 fC
246 252 206 (File: invk) 206 SB
452 252 55 (.m) 55 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 313 725 (function theta = invk\(g,soln\)) 725 SB
246 355 1075 (% invk.m - inverse kinematics of Intelledex) 1075 SB
246 397 750 (% syntax: theta = invk\(g,soln\)) 750 SB
246 439 1075 (%     theta is a 6x1 vector of joint angles) 1075 SB
246 482 550 (%     g is a 4x4 frame) 550 SB
246 524 1725 (%     soln is an optional integer argument in 0,..,7 to pick solution) 1725 SB
246 566 25 (%) 25 SB
246 608 425 (% DC Deno 9-26-91) 425 SB
246 692 825 (% Could speed up considerably by:) 825 SB
246 734 1250 (%    1\) compiling code with an optimizing compiler) 1250 SB
246 776 1450 (%    2\) compute directly inverse of 4x4 homogeneous matrix) 1450 SB
1696 776 475 ( with R^T and -R^Tp) 475 SB
246 818 1575 (%    3\) compute directly exponentials of twists with Rodriques') 1575 SB
1821 818 300 ( formula and) 300 SB
246 860 900 (%           other simple expressions) 900 SB
246 902 1225 (%    4\) leave static definitions out of functions) 1225 SB
246 987 825 (% set decision tree array as 1x3 ) 825 SB
1071 987 525 (vector of 1's and 0's) 525 SB
246 1029 350 (if nargin > 1,) 350 SB
246 1071 675 (    select = sdecide\(soln\);) 675 SB
246 1113 125 (else,) 125 SB
246 1155 600 (    select = sdecide\(0\);) 600 SB
246 1197 75 (end) 75 SB
246 1281 450 ([l1,l2] = linklen;) 450 SB
846 1281 550 (% l1,l2 \(link lengths\)) 550 SB
246 1365 675 (% points on each twist axis) 675 SB
246 1407 625 (o0 = [-\(l1+l2\); 0; 0; 1];) 625 SB
32 0 0 42 42 0 0 0 33 /Courier-Oblique /font11 ANSIFont font
246 1449 225 (** etc **) 225 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 1534 1075 (% unit direction vectors of each twist axis) 1075 SB
246 1576 450 (w0 = [0; 1; 0; 0];) 450 SB
32 0 0 42 42 0 0 0 33 /Courier-Oblique /font11 ANSIFont font
246 1618 225 (** etc **) 225 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 1702 1300 (% compute 4x4 unit twists wrt initial frame location) 1300 SB
246 1744 900 (xi0hat = twisthat\(cross\(o0,w0\), w0\);) 900 SB
32 0 0 42 42 0 0 0 33 /Courier-Oblique /font11 ANSIFont font
246 1786 225 (** etc **) 225 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 1870 625 (% decompose into 2 parts:) 625 SB
246 1912 1350 (%     cartesian location of end effector \(theta 3,4,5\)) 1350 SB
246 1954 1275 (%     orientation of "wrist" \(actually at shoulder\)) 1275 SB
32 0 0 42 42 0 0 0 33 /Courier-Oblique /font11 ANSIFont font
246 1997 1175 (** comments explaining each step belong here **) 1175 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 2039 250 (p012 = o0;) 250 SB
246 2081 225 (p45 = o4;) 225 SB
246 2123 575 (d = norm\(g*p45 - p012\);) 575 SB
246 2165 1150 (theta3 = cp3\(p45, p012, d, w3, o3, select\(1\)\);) 1150 SB
246 2249 400 (b = inv\(g\)*p012;) 400 SB
246 2291 750 (q = expm\(-xi3hat*theta3\)*p012;) 750 SB
246 2333 1275 ([theta4,theta5] = cp2\(b, q, w4, w5, o4, select\(2\)\);) 1275 SB
246 2417 1800 (g012 = g*expm\(-xi5hat*theta5\)*expm\(-xi4hat*theta4\)*expm\(-xi3hat*theta3\);) 1800 SB
246 2459 1625 ([theta0,theta1] = cp2\(w2, g012*w2, w0, w1, [0;0;0;0], select\(3\)\);) 1625 SB
246 2502 1300 (g2 = expm\(-xi1hat*theta1\)*expm\(-xi0hat*theta0\)*g012;) 1300 SB
246 2544 975 (theta2 = cp1\(w1, g2*w1, w2, [0;0;0;0]\);) 975 SB
246 2628 1450 (theta = real\([theta0 theta1 theta2 theta3 theta4 theta5]\);) 1450 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font36 ANSIFont font
246 2757 179 (If a frame ) 179 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
425 2762 25 (g) 25 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font36 ANSIFont font
450 2757 1709 ( has been defined previously, then the set of 8 inverse kinematic solutions \(if they exist\) are returned) 1709 SB
246 2807 303 (in the 8x6 matrix ) 303 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
549 2812 25 (A) 25 SB
32 0 0 42 42 0 0 0 38 /Times-Roman /font36 ANSIFont font
574 2807 722 ( with the following Matlab code fragment:) 722 SB
32 0 0 42 42 0 0 0 33 /Courier /font0 ANSIFont font
246 2904 25 (A) 25 SB
271 2904 950 (=[]; for i=0:7, A=[A; invk\(g,i\)];, end) 950 SB
32 0 0 50 50 0 0 0 45 /Times-Roman /font36 ANSIFont font
246 29 913 (EE125 Homework 3: Suggestions for Coding) 913 SB
1774 29 422 (DC Deno, 10-Oct-91) 422 SB
246 2969 110 (Page ) 110 SB
356 2969 25 (2) 25 SB
EJ RS
%%PageTrailer
%%Trailer
SVDoc restore
end
%%DocumentSuppliedResources: procset Win35Dict 3 1

%%DocumentNeededResources: font Courier
%%+ font Courier-Oblique
%%+ font Times-Bold
%%+ font Times-Roman

%%EOF
